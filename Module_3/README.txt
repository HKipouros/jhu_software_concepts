Name: Holly Kipouros (hkipour1)
Module Info: Module 3:SQL Data Analysis due 09/14/2025 at 11:59 PM EST

Approach: 

SSH url to GitHub repo -  git@github.com:HKipouros/jhu_software_concepts.git

load_data.py - This module uses psycopg to create a cursor object and create a single table “applicants” in a PostgreSQL database. The module also takes in a file (generated in the Module 2 assignment) and inserts the data into the database for further processing using an INSERT statement.

query_data.py - This module runs a series of queries on the information within the database using WHERE and LIKE clauses to filter data of interest. The output is stored as a dictionary of number-tuple key-value pairs (each tuple is a long form version of the query and its answer). Each query also filters out data as needed (e.g., GPA entries over 5).

update_database.py - This module contains functions needed to pull new data from The Grad Cafe. Initially, the function find_recent() finds the most recent entry currently in the database by means of the integer at the end of the entry url. Then, the updated_scrape() function scrapes new data from the website in a similar manner to the code written for Module 2, with the difference being the function stops scraping once it reaches the entry of the current most recent entry in the database. Then, the module proceeds to clean the new scraped data and run it through the LLM in a similar manner to the code written for Module 2. 

Website folder - contains app.py, pages.py, templates folder for HTML files, and static folder for CSS styling files.

app.py - This module instantiates a Flask object and calls a blueprint from the “pages” module described below. Within a dunder main block, the web application is launched using “app.run”. This portion differed from my prior Module 1 code as I pivoted to Replit for this assignment and had to set the ports to cooperate with the Replit interface.

pages.py - This module controls any website pages using a Blueprint. Before any routes are defined, a variable “is_updating” is generated to keep track of any future pull data activity. Then, a route is defined for the home page to display the current analysis output of the database, which is generated by calling a function from the query_data module. Routes are also defined for a “pull data” button and an “update analysis” button. These buttons are styled with hover text to provide a further indication of their purpose to a user. When the “pull data” button is activated, functions from the update_database module are called to insert new entries to the Grad Cafe into the database, and the “is_updating” variable is set to indicate that this processing is happening and that no other buttons should be activated. The code uses “flash” statements to give the user an update of how the processing is going. A route is also defined for the “Update Analysis” button, and an “if” control structure is used to ensure that nothing is executed if the “is_updating” variable is set. Otherwise, the function from query_data is called again to perform analysis on any new data added to the database, and a “redirect” method is used to refresh the home page with this new analysis displayed. 

Known bugs- there are no known bugs.