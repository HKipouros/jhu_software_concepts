"""
This module reads JSON data containing applicant details, creates (or resets) the
`applicants` table, and inserts the data into the table.

Intended to be run manually or used as a utility during data updates.

Environment Variables:
    DATABASE_URL (str): PostgreSQL connection string used to connect to the database.

Usage:
    python update_database.py

Input:
    JSON file (e.g., 'llm_extend_applicant_data.json') with a list of applicant entries.

Each entry should include:
    - program, comments, date_added, url, status, term, US/International,
      GPA, GRE, GRE_V, GRE_AW, Degree, llm-generated-program, llm-generated-university
"""

import os
import json
import psycopg


def get_db_connection():
    """Create and return a database connection."""
    return psycopg.connect(os.environ["DATABASE_URL"])


def data_to_base(file_name: str):  # pylint: disable=R0914
    """
    Function to add applicant data from json file to database
    """
    conn = get_db_connection()
    try:
        # Create a cursor object and create "applicant" table.
        with conn.cursor() as cur:  # pylint: disable=E1101

            # Drop applicants table if it exists.
            cur.execute("""
            DROP TABLE IF EXISTS applicants;""")

            # Create "applicants" table with columns defined by assignment.
            cur.execute("""
            CREATE TABLE IF NOT EXISTS applicants(
              id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
              program TEXT,
              comments TEXT,
              date_added date,
              url TEXT,
              status TEXT,
              term TEXT,
              us_or_international TEXT,
              gpa real,
              gre real,
              gre_v real,
              gre_aw real,
              degree TEXT,
              llm_generated_program TEXT,
              llm_generated_university TEXT
              );""")

            # Load and insert data from file.
            with open(file_name, 'r', encoding="utf-8") as fhand:
                data = json.load(fhand)

            # Insert each entry.
            for entry in data:
                # Prepare data for insertion.
                program = entry["program"] if entry["program"] else None
                comments = entry["comments"] if entry["comments"] else None
                date_added = entry["date_added"] if entry[
                    "date_added"] else None
                url = entry["url"] if entry["url"] else None
                status = entry["status"] if entry["status"] else None
                term = entry["term"] if entry["term"] else None
                us_or_international = entry["US/International"] if entry[
                    "US/International"] else None
                gpa = float(entry["GPA"]) if entry["GPA"] else None
                gre = float(entry["GRE"]) if entry["GRE"] else None
                gre_v = float(entry["GRE_V"]) if entry["GRE_V"] else None
                gre_aw = float(entry["GRE_AW"]) if entry["GRE_AW"] else None
                degree = entry["Degree"] if entry["Degree"] else None
                llm_generated_program = entry["llm-generated-program"] if entry[
                    "llm-generated-program"] else None
                llm_generated_university = entry[
                    "llm-generated-university"] if entry[
                        "llm-generated-university"] else None

                cur.execute(
                    """
                INSERT INTO applicants (
                    program, comments, date_added, url, status, term, 
                    us_or_international, gpa, gre, gre_v, gre_aw, degree,
                    llm_generated_program, llm_generated_university
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (url) DO NOTHING
                """, (program, comments, date_added, url, status, term,
                      us_or_international, gpa, gre, gre_v, gre_aw, degree,
                      llm_generated_program, llm_generated_university))

            # Commit the changes to the database.
            conn.commit()  # pylint: disable=E1101
    finally:
        # Close the connection.
        conn.close()  # pylint: disable=E1101


if __name__ == "__main__":
    INPUT_FILE = "llm_extend_applicant_data.json"  # Data file obtained in Mod 2
    data_to_base(INPUT_FILE)
    print("Done!!")
